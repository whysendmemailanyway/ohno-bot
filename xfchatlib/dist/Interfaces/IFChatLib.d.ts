import { IPlugin } from "./IPlugin";
import { IConfig } from "./IConfig";
export interface IFChatLib {
    addConnectionListener(fn: Function): void;
    removeConnectionListener(fn: any): void;
    addJoinListener(fn: any): void;
    removeJoinListener(fn: any): void;
    addLeaveListener(fn: any): void;
    removeLeaveListener(fn: any): void;
    addOnlineListener(fn: any): void;
    removeOnlineListener(fn: any): void;
    addOfflineListener(fn: any): void;
    removeOfflineListener(fn: any): void;
    addStatusListener(fn: any): void;
    removeStatusListener(fn: any): void;
    addChatOPListListener(fn: any): void;
    removeChatOPListListener(fn: any): void;
    addChatOPAddedListener(fn: any): void;
    removeChatOPAddedListener(fn: any): void;
    addChatOPRemovedListener(fn: any): void;
    removeChatOPRemovedListener(fn: any): void;
    addInviteListener(fn: any): void;
    removeInviteListener(fn: any): void;
    addKickListener(fn: any): void;
    removeKickListener(fn: any): void;
    addBanListener(fn: any): void;
    removeBanListener(fn: any): void;
    addDescriptionChangeListener(fn: any): void;
    removeDescriptionChangeListener(fn: any): void;
    addPingListener(fn: any): void;
    removePingListener(fn: any): void;
    addInitialChannelDataListener(fn: any): void;
    removeInitialChannelDataListener(fn: any): void;
    addMessageListener(fn: any): void;
    removeMessageListener(fn: any): void;
    addPrivateMessageListener(fn: any): void;
    removePrivateMessageListener(fn: any): void;
    addRollListener(fn: any): void;
    removeRollListener(fn: any): void;
    addVariableListener(fn: any): void;
    removeVariableListener(fn: any): void;
    config: IConfig;
    banListeners: any;
    chatOPAddedListeners: any;
    chatOPListListeners: any;
    chatOPRemovedListeners: any;
    connectionListeners: any;
    descriptionChangeListeners: any;
    initialChannelDataListeners: any;
    inviteListeners: any;
    joinListeners: any;
    kickListeners: any;
    leaveListeners: any;
    messageListeners: any;
    offlineListeners: any;
    onlineListeners: any;
    pingListeners: any;
    privateMessageListeners: any;
    rollListeners: any;
    statusListeners: any;
    variableListeners: any;
    usersInChannel: any;
    chatOPsInChannel: any;
    commandHandlers: any;
    channels: Map<string, Array<IPlugin>>;
    ws: any;
    pingInterval: NodeJS.Timer;
    floodLimit: number;
    lastTimeCommandReceived: number;
    commandsInQueue: number;
    sendData(messageType: string, content: string): Promise<void>;
    generateCommandHandlers(): void;
    setFloodLimit(delay: any): void;
    connect(): Promise<void>;
    joinChannelsWhereInvited(args: any): void;
    joinChannelOnConnect(args: any): void;
    setStatus(status: string, message: string): void;
    joinNewChannel(channel: string): void;
    commandListener(args: any, chanName: string): void;
    throwError(args: any, error: any, chan: any): void;
    addUsersToList(args: any): void;
    addUserToList(args: any): void;
    removeUserFromList(args: any): void;
    removeUserFromChannels(args: any): void;
    addChatOPsToList(args: any): void;
    addChatOPToList(args: any): void;
    removeChatOPFromList(args: any): void;
    variableChangeHandler(args: any): void;
    getTicket(): Promise<object>;
    sendWS(command: any, object: any): void;
    sendMessage(message: any, channel: any): void;
    sendPrivMessage(message: any, character: any): void;
    getUserList(channel: any): string[];
    getAllUsersList(): string[];
    getChatOPList(channel: any): string[];
    isUserChatOP(username: any, channel: any): boolean;
    isUserMaster(username: any): boolean;
    disconnect(): void;
    restart(): void;
    softRestart(channel: any): void;
    roll(customDice: any, channel: any): void;
    updateRoomsConfig(): void;
    startWebsockets(json: any): void;
    splitOnce(str: any, delim: any): string[];
}
